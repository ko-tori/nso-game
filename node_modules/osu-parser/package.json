{
  "_args": [
    [
      {
        "raw": "osu-parser@https://github.com/ko-tori/osu-parser/tarball/master",
        "scope": null,
        "escapedName": "osu-parser",
        "name": "osu-parser",
        "rawSpec": "https://github.com/ko-tori/osu-parser/tarball/master",
        "spec": "https://github.com/ko-tori/osu-parser/tarball/master",
        "type": "remote"
      },
      "/mnt/d/Programming/nso-game"
    ]
  ],
  "_from": "https://github.com/ko-tori/osu-parser/tarball/master",
  "_id": "osu-parser@0.3.3",
  "_inCache": true,
  "_location": "/osu-parser",
  "_phantomChildren": {},
  "_requested": {
    "raw": "osu-parser@https://github.com/ko-tori/osu-parser/tarball/master",
    "scope": null,
    "escapedName": "osu-parser",
    "name": "osu-parser",
    "rawSpec": "https://github.com/ko-tori/osu-parser/tarball/master",
    "spec": "https://github.com/ko-tori/osu-parser/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/ko-tori/osu-parser/tarball/master",
  "_shasum": "68fad636d166cde70f4bddf862db4f771b636acd",
  "_shrinkwrap": null,
  "_spec": "osu-parser@https://github.com/ko-tori/osu-parser/tarball/master",
  "_where": "/mnt/d/Programming/nso-game",
  "author": {
    "name": "nojhamster"
  },
  "bugs": {
    "url": "https://github.com/nojhamster/osu-parser/issues"
  },
  "dependencies": {},
  "description": "converts osu files into javascript objects",
  "devDependencies": {
    "mocha": "*"
  },
  "homepage": "https://github.com/nojhamster/osu-parser",
  "keywords": [
    "osu",
    "beatmap",
    "parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "osu-parser",
  "optionalDependencies": {},
  "readme": "osu-parser\n==========\n[![Build Status](https://travis-ci.org/nojhamster/osu-parser.png?branch=master)](https://travis-ci.org/nojhamster/osu-parser)\n\nA parser for **Nodejs** that converts osu files into javascript objects. Feel free to give it a try and **post issues** to help me improve it ;)\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [The resulting object](#the-resulting-object)\n- [Methods](#methods)\n\t- [parseFile(filepath, callback)](#parsefilefilepath-callback)\n\t- [parseStream(stream, callback)](#parsestreamstream-callback)\n\t- [parseContent(content)](#parsecontentcontent)\n- [TODO](#todo)\n- [Changelog](https://github.com/nojhamster/osu-parser/blob/master/changelog.md)\n\n## Installation\n\n```\nnpm install osu-parser\n```\n\n## Usage\n\n```javascript\n  var parser = require('osu-parser');\n\n  parser.parseFile('path/to/map.osu', function (err, beatmap) {\n    console.log(beatmap);\n  });\n```\n\n## The resulting object\n\nSimple key/value entries like this...\n```\n...\nPreviewTime: 42860\n...\n```\n...are directly reachable as properties :\n```\nconsole.log(beatmap['PreviewTime']);\n// prints 42860\n```\n\n### Additionnal beatmap properties :\n<table>\n  <tr>\n    <th>name</th>\n    <th>type</th>\n    <th>description</th>\n  </tr>\n  <tr><td>fileFormat</td><td>String</td><td>osu file format (v7, v12...).</td></tr>\n  <tr><td>bgFilename</td><td>String</td><td>name of the background image.</td></tr>\n  <tr><td>nbCircles</td><td>Integer</td><td>number of circles.</td></tr>\n  <tr><td>nbSliders</td><td>Integer</td><td>number of sliders.</td></tr>\n  <tr><td>nbSpinners</td><td>Integer</td><td>number of spinners.</td></tr>\n  <tr><td>bpmMin</td><td>Integer</td><td>minimum bpm.</td></tr>\n  <tr><td>bpmMax</td><td>Integer</td><td>maximum bpm.</td></tr>\n  <tr><td>maxCombo</td><td>Integer</td><td>maximum combo.</td></tr>\n  <tr><td>totalTime</td><td>Integer</td><td>total time in seconds.</td></tr>\n  <tr><td>drainingTime</td><td>Integer</td><td>draining time in seconds.</td></tr>\n  <tr><td>tagsArray</td><td>Array</td><td>tags splitted into an array, for convenience.</td></tr>\n  <tr><td>breakTimes</td><td>Array</td><td>list of all break times. Each has <code>startTime</code> and <code>endTime</code> properties.</td></tr>\n  <tr><td>timingPoints</td><td>Array</td><td>list of all timing points. See TimingPoint below.</td></tr>\n  <tr><td>hitObjects</td><td>Array</td><td>list of all hitobjects. See HitObject below.</td></tr>\n</table>\n\n#### TimingPoint properties\n<table>\n  <tr>\n    <th>name</th>\n    <th>type</th>\n    <th>description</th>\n  </tr>\n  <tr><td>offset</td><td>Integer</td><td>offset in milliseconds.</td></tr>\n  <tr><td>beatLength</td><td>Float</td><td>length of a single beat in milliseconds. Inherited from previous timing point if negative.</td></tr>\n  <tr><td>bpm</td><td>Float</td><td>number of beats per minute. Inherited from previous timing point if beatLength is negative.</td></tr>\n  <tr><td>velocity</td><td>Float</td><td>velocity multiplicator.</td></tr>\n  <tr><td>timingSignature</td><td>Integer</td><td>3 = simple triple, 4 = simple quadruple (used in editor).</td></tr>\n  <tr><td>sampleSetId</td><td>Integer</td><td>sound samples. None = 0, Normal = 1, Soft = 2.</td></tr>\n  <tr><td>customSampleIndex</td><td>Integer</td><td>index of the custom sound samples. (<code>0</code> if none)</td></tr>\n  <tr><td>sampleVolume</td><td>Integer</td><td>volume of the samples.</td></tr>\n  <tr><td>timingChange</td><td>Boolean</td><td>is there a beatLength change ?</td></tr>\n  <tr><td>kiaiTimeActive</td><td>Boolean</td><td>is it a kiai section ?</td></tr>\n</table>\n\n#### HitObject properties\n<table>\n  <tr>\n    <th>name</th>\n    <th>type</th>\n    <th>description</th>\n  </tr>\n  <tr><td>objectName</td><td>String</td><td>circle, slider, spinner or unknown.</td></tr>\n  <tr><td>position</td><td>Array[Integer]</td><td>object position : [x,y]</td></tr>\n  <tr><td>startTime</td><td>Integer</td><td>start offset.</td></tr>\n  <tr><td>newCombo</td><td>Boolean</td><td>is it a new combo ?</td></tr>\n  <tr><td>soundTypes</td><td>Array</td><td>list of sound effects. Those can be : <code>normal</code>, <code>whistle</code>, <code>finish</code>, <code>clap</code>.</td></tr>\n  <tr><td>additions</td><td>Object</td>\n    <td>\n      hitobject specific additions. It can have those properties :\n      <br/>-<code>sample</code>: object specific sample. It can be : <code>soft</code>, <code>normal</code>, <code>drum</code>.\n      <br/>-<code>additionalSample</code>: the sample to use for additional sounds (finish, whistle, clap). It can be : <code>soft</code>, <code>normal</code>, <code>drum</code>.\n      <br/>-<code>customSampleIndex</code>: index of the custom sample to use (ex: normal-2).\n      <br/>-<code>hitsoundVolume</code>: specific volume for this object (require <code>hitsound</code> to be an existing file).\n      <br/>-<code>hitsound</code>: a file to use as hitsound. It disables all other hitsounds.\n    </td>\n  </tr>\n</table>\n\n##### Slider specific properties\n<table>\n  <tr>\n    <th>name</th>\n    <th>type</th>\n    <th>description</th>\n  </tr>\n  <tr><td>repeatCount</td><td>Integer</td><td>number of repeats, starts at <code>1</code> for a single-way slider.</td></tr>\n  <tr><td>pixelLength</td><td>Integer</td><td>length in osu-relative pixels.</td></tr>\n  <tr><td>duration</td><td>Integer</td><td>duration in milliseconds, rounded to the upper integer.</td></tr>\n  <tr><td>endTime</td><td>Integer</td><td>end offset.</td></tr>\n  <tr><td>curveType</td><td>String</td><td>can be catmull, bezier, linear or pass-through.</td></tr>\n  <tr><td>points</td><td>Array</td><td>list of all points including the very first. Each point is an array of coordinates [x,y].</td></tr>\n  <tr><td>endPosition</td><td>Array</td><td>coordinates of the slider end ([x,y]). (not calculated for catmull)</td></tr>\n  <tr><td>edges</td><td>Array</td>\n    <td>\n      list of edges. The number of edges is <code>repeatCount + 1</code>. Each one has two properties :\n      <br/>-<code>soundTypes</code>: list of sound effects. Those can be : normal, whistle, finish, clap.\n      <br/>-<code>additions</code>: edge additions. Same as hitobject additions, but can only have <code>sample</code> and <code>additionalSample</code>.\n    </td>\n  </tr>\n</table>\n\n##### Spinner specific properties\n<table>\n  <tr>\n    <th>name</th>\n    <th>type</th>\n    <th>description</th>\n  </tr>\n  <tr><td>endTime</td><td>Integer</td><td>end offset.</td></tr>\n</table>\n\n## Methods\n\n### parseFile(filepath, callback)\nParse the given file. The callback returns (error, beatmap).\n```javascript\n  var parser = require('osu-parser');\n\n  parser.parseFile('path/to/map.osu', function (err, beatmap) {\n    console.log(beatmap);\n  });\n```\n\n### parseStream(stream, callback)\nParse a stream containing a file content. The callback returns (error, beatmap).\n```javascript\n  var parser = require('osu-parser');\n  var fs     = require('fs');\n  var stream = fs.createReadStream('path/to/map.osu');\n\n  parser.parseStream(stream, function (err, beatmap) {\n    console.log(beatmap);\n  });\n```\n\n### parseContent(content)\nParse the content of a file as a string or a buffer.\n```javascript\n  var parser  = require('osu-parser');\n  var fs      = require('fs');\n  var content = fs.readFileSync('path/to/map.osu');\n\n  var beatmap = parser.parseContent(content);\n```\n\n## TODO\n- translate the samplesetId of timing points\n- parse events\n- make tests more reliable\n- add a synchronous version of parseFile\n- make it usable in a browser ? (not sure that would be useful)\n- ...\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nojhamster/osu-parser.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.3.3"
}
